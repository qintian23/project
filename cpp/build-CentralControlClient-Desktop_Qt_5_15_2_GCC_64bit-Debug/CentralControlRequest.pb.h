// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CentralControlRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CentralControlRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CentralControlRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CentralControlRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CentralControlRequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CentralControlRequest_2eproto;
namespace CentralControlRequest {
class Request1;
struct Request1DefaultTypeInternal;
extern Request1DefaultTypeInternal _Request1_default_instance_;
class Request2;
struct Request2DefaultTypeInternal;
extern Request2DefaultTypeInternal _Request2_default_instance_;
class Request3;
struct Request3DefaultTypeInternal;
extern Request3DefaultTypeInternal _Request3_default_instance_;
class Request4;
struct Request4DefaultTypeInternal;
extern Request4DefaultTypeInternal _Request4_default_instance_;
class Request5;
struct Request5DefaultTypeInternal;
extern Request5DefaultTypeInternal _Request5_default_instance_;
}  // namespace CentralControlRequest
PROTOBUF_NAMESPACE_OPEN
template<> ::CentralControlRequest::Request1* Arena::CreateMaybeMessage<::CentralControlRequest::Request1>(Arena*);
template<> ::CentralControlRequest::Request2* Arena::CreateMaybeMessage<::CentralControlRequest::Request2>(Arena*);
template<> ::CentralControlRequest::Request3* Arena::CreateMaybeMessage<::CentralControlRequest::Request3>(Arena*);
template<> ::CentralControlRequest::Request4* Arena::CreateMaybeMessage<::CentralControlRequest::Request4>(Arena*);
template<> ::CentralControlRequest::Request5* Arena::CreateMaybeMessage<::CentralControlRequest::Request5>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CentralControlRequest {

// ===================================================================

class Request1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CentralControlRequest.Request1) */ {
 public:
  inline Request1() : Request1(nullptr) {}
  ~Request1() override;
  explicit PROTOBUF_CONSTEXPR Request1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request1(const Request1& from);
  Request1(Request1&& from) noexcept
    : Request1() {
    *this = ::std::move(from);
  }

  inline Request1& operator=(const Request1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request1& operator=(Request1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request1& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request1* internal_default_instance() {
    return reinterpret_cast<const Request1*>(
               &_Request1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request1& a, Request1& b) {
    a.Swap(&b);
  }
  inline void Swap(Request1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request1& from) {
    Request1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CentralControlRequest.Request1";
  }
  protected:
  explicit Request1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kS1FieldNumber = 1,
  };
  // string s1 = 1;
  void clear_s1();
  const std::string& s1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s1();
  PROTOBUF_NODISCARD std::string* release_s1();
  void set_allocated_s1(std::string* s1);
  private:
  const std::string& _internal_s1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s1(const std::string& value);
  std::string* _internal_mutable_s1();
  public:

  // @@protoc_insertion_point(class_scope:CentralControlRequest.Request1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CentralControlRequest_2eproto;
};
// -------------------------------------------------------------------

class Request2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CentralControlRequest.Request2) */ {
 public:
  inline Request2() : Request2(nullptr) {}
  ~Request2() override;
  explicit PROTOBUF_CONSTEXPR Request2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request2(const Request2& from);
  Request2(Request2&& from) noexcept
    : Request2() {
    *this = ::std::move(from);
  }

  inline Request2& operator=(const Request2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request2& operator=(Request2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request2* internal_default_instance() {
    return reinterpret_cast<const Request2*>(
               &_Request2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request2& a, Request2& b) {
    a.Swap(&b);
  }
  inline void Swap(Request2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request2& from) {
    Request2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CentralControlRequest.Request2";
  }
  protected:
  explicit Request2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kB1FieldNumber = 1,
  };
  // bool b1 = 1;
  void clear_b1();
  bool b1() const;
  void set_b1(bool value);
  private:
  bool _internal_b1() const;
  void _internal_set_b1(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CentralControlRequest.Request2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool b1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CentralControlRequest_2eproto;
};
// -------------------------------------------------------------------

class Request3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CentralControlRequest.Request3) */ {
 public:
  inline Request3() : Request3(nullptr) {}
  ~Request3() override;
  explicit PROTOBUF_CONSTEXPR Request3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request3(const Request3& from);
  Request3(Request3&& from) noexcept
    : Request3() {
    *this = ::std::move(from);
  }

  inline Request3& operator=(const Request3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request3& operator=(Request3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request3* internal_default_instance() {
    return reinterpret_cast<const Request3*>(
               &_Request3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Request3& a, Request3& b) {
    a.Swap(&b);
  }
  inline void Swap(Request3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request3& from) {
    Request3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CentralControlRequest.Request3";
  }
  protected:
  explicit Request3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kS1FieldNumber = 1,
    kS2FieldNumber = 2,
  };
  // string s1 = 1;
  void clear_s1();
  const std::string& s1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s1();
  PROTOBUF_NODISCARD std::string* release_s1();
  void set_allocated_s1(std::string* s1);
  private:
  const std::string& _internal_s1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s1(const std::string& value);
  std::string* _internal_mutable_s1();
  public:

  // string s2 = 2;
  void clear_s2();
  const std::string& s2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s2();
  PROTOBUF_NODISCARD std::string* release_s2();
  void set_allocated_s2(std::string* s2);
  private:
  const std::string& _internal_s2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s2(const std::string& value);
  std::string* _internal_mutable_s2();
  public:

  // @@protoc_insertion_point(class_scope:CentralControlRequest.Request3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CentralControlRequest_2eproto;
};
// -------------------------------------------------------------------

class Request4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CentralControlRequest.Request4) */ {
 public:
  inline Request4() : Request4(nullptr) {}
  ~Request4() override;
  explicit PROTOBUF_CONSTEXPR Request4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request4(const Request4& from);
  Request4(Request4&& from) noexcept
    : Request4() {
    *this = ::std::move(from);
  }

  inline Request4& operator=(const Request4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request4& operator=(Request4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request4* internal_default_instance() {
    return reinterpret_cast<const Request4*>(
               &_Request4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Request4& a, Request4& b) {
    a.Swap(&b);
  }
  inline void Swap(Request4* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request4>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request4& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request4& from) {
    Request4::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request4* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CentralControlRequest.Request4";
  }
  protected:
  explicit Request4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kS1FieldNumber = 1,
    kS2FieldNumber = 2,
    kS3FieldNumber = 3,
    kS4FieldNumber = 4,
    kS5FieldNumber = 5,
    kS6FieldNumber = 6,
  };
  // string s1 = 1;
  void clear_s1();
  const std::string& s1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s1();
  PROTOBUF_NODISCARD std::string* release_s1();
  void set_allocated_s1(std::string* s1);
  private:
  const std::string& _internal_s1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s1(const std::string& value);
  std::string* _internal_mutable_s1();
  public:

  // string s2 = 2;
  void clear_s2();
  const std::string& s2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s2();
  PROTOBUF_NODISCARD std::string* release_s2();
  void set_allocated_s2(std::string* s2);
  private:
  const std::string& _internal_s2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s2(const std::string& value);
  std::string* _internal_mutable_s2();
  public:

  // string s3 = 3;
  void clear_s3();
  const std::string& s3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s3();
  PROTOBUF_NODISCARD std::string* release_s3();
  void set_allocated_s3(std::string* s3);
  private:
  const std::string& _internal_s3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s3(const std::string& value);
  std::string* _internal_mutable_s3();
  public:

  // string s4 = 4;
  void clear_s4();
  const std::string& s4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s4();
  PROTOBUF_NODISCARD std::string* release_s4();
  void set_allocated_s4(std::string* s4);
  private:
  const std::string& _internal_s4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s4(const std::string& value);
  std::string* _internal_mutable_s4();
  public:

  // string s5 = 5;
  void clear_s5();
  const std::string& s5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s5();
  PROTOBUF_NODISCARD std::string* release_s5();
  void set_allocated_s5(std::string* s5);
  private:
  const std::string& _internal_s5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s5(const std::string& value);
  std::string* _internal_mutable_s5();
  public:

  // string s6 = 6;
  void clear_s6();
  const std::string& s6() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s6(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s6();
  PROTOBUF_NODISCARD std::string* release_s6();
  void set_allocated_s6(std::string* s6);
  private:
  const std::string& _internal_s6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s6(const std::string& value);
  std::string* _internal_mutable_s6();
  public:

  // @@protoc_insertion_point(class_scope:CentralControlRequest.Request4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s3_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s4_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s5_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s6_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CentralControlRequest_2eproto;
};
// -------------------------------------------------------------------

class Request5 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CentralControlRequest.Request5) */ {
 public:
  inline Request5() : Request5(nullptr) {}
  ~Request5() override;
  explicit PROTOBUF_CONSTEXPR Request5(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request5(const Request5& from);
  Request5(Request5&& from) noexcept
    : Request5() {
    *this = ::std::move(from);
  }

  inline Request5& operator=(const Request5& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request5& operator=(Request5&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request5& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request5* internal_default_instance() {
    return reinterpret_cast<const Request5*>(
               &_Request5_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Request5& a, Request5& b) {
    a.Swap(&b);
  }
  inline void Swap(Request5* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request5* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request5* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request5>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request5& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request5& from) {
    Request5::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request5* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CentralControlRequest.Request5";
  }
  protected:
  explicit Request5(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kS1FieldNumber = 1,
    kS2FieldNumber = 2,
    kS3FieldNumber = 3,
  };
  // string s1 = 1;
  void clear_s1();
  const std::string& s1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s1();
  PROTOBUF_NODISCARD std::string* release_s1();
  void set_allocated_s1(std::string* s1);
  private:
  const std::string& _internal_s1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s1(const std::string& value);
  std::string* _internal_mutable_s1();
  public:

  // string s2 = 2;
  void clear_s2();
  const std::string& s2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s2();
  PROTOBUF_NODISCARD std::string* release_s2();
  void set_allocated_s2(std::string* s2);
  private:
  const std::string& _internal_s2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s2(const std::string& value);
  std::string* _internal_mutable_s2();
  public:

  // string s3 = 3;
  void clear_s3();
  const std::string& s3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s3();
  PROTOBUF_NODISCARD std::string* release_s3();
  void set_allocated_s3(std::string* s3);
  private:
  const std::string& _internal_s3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s3(const std::string& value);
  std::string* _internal_mutable_s3();
  public:

  // @@protoc_insertion_point(class_scope:CentralControlRequest.Request5)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s3_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CentralControlRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request1

// string s1 = 1;
inline void Request1::clear_s1() {
  _impl_.s1_.ClearToEmpty();
}
inline const std::string& Request1::s1() const {
  // @@protoc_insertion_point(field_get:CentralControlRequest.Request1.s1)
  return _internal_s1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request1::set_s1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlRequest.Request1.s1)
}
inline std::string* Request1::mutable_s1() {
  std::string* _s = _internal_mutable_s1();
  // @@protoc_insertion_point(field_mutable:CentralControlRequest.Request1.s1)
  return _s;
}
inline const std::string& Request1::_internal_s1() const {
  return _impl_.s1_.Get();
}
inline void Request1::_internal_set_s1(const std::string& value) {
  
  _impl_.s1_.Set(value, GetArenaForAllocation());
}
inline std::string* Request1::_internal_mutable_s1() {
  
  return _impl_.s1_.Mutable(GetArenaForAllocation());
}
inline std::string* Request1::release_s1() {
  // @@protoc_insertion_point(field_release:CentralControlRequest.Request1.s1)
  return _impl_.s1_.Release();
}
inline void Request1::set_allocated_s1(std::string* s1) {
  if (s1 != nullptr) {
    
  } else {
    
  }
  _impl_.s1_.SetAllocated(s1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s1_.IsDefault()) {
    _impl_.s1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlRequest.Request1.s1)
}

// -------------------------------------------------------------------

// Request2

// bool b1 = 1;
inline void Request2::clear_b1() {
  _impl_.b1_ = false;
}
inline bool Request2::_internal_b1() const {
  return _impl_.b1_;
}
inline bool Request2::b1() const {
  // @@protoc_insertion_point(field_get:CentralControlRequest.Request2.b1)
  return _internal_b1();
}
inline void Request2::_internal_set_b1(bool value) {
  
  _impl_.b1_ = value;
}
inline void Request2::set_b1(bool value) {
  _internal_set_b1(value);
  // @@protoc_insertion_point(field_set:CentralControlRequest.Request2.b1)
}

// -------------------------------------------------------------------

// Request3

// string s1 = 1;
inline void Request3::clear_s1() {
  _impl_.s1_.ClearToEmpty();
}
inline const std::string& Request3::s1() const {
  // @@protoc_insertion_point(field_get:CentralControlRequest.Request3.s1)
  return _internal_s1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request3::set_s1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlRequest.Request3.s1)
}
inline std::string* Request3::mutable_s1() {
  std::string* _s = _internal_mutable_s1();
  // @@protoc_insertion_point(field_mutable:CentralControlRequest.Request3.s1)
  return _s;
}
inline const std::string& Request3::_internal_s1() const {
  return _impl_.s1_.Get();
}
inline void Request3::_internal_set_s1(const std::string& value) {
  
  _impl_.s1_.Set(value, GetArenaForAllocation());
}
inline std::string* Request3::_internal_mutable_s1() {
  
  return _impl_.s1_.Mutable(GetArenaForAllocation());
}
inline std::string* Request3::release_s1() {
  // @@protoc_insertion_point(field_release:CentralControlRequest.Request3.s1)
  return _impl_.s1_.Release();
}
inline void Request3::set_allocated_s1(std::string* s1) {
  if (s1 != nullptr) {
    
  } else {
    
  }
  _impl_.s1_.SetAllocated(s1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s1_.IsDefault()) {
    _impl_.s1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlRequest.Request3.s1)
}

// string s2 = 2;
inline void Request3::clear_s2() {
  _impl_.s2_.ClearToEmpty();
}
inline const std::string& Request3::s2() const {
  // @@protoc_insertion_point(field_get:CentralControlRequest.Request3.s2)
  return _internal_s2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request3::set_s2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlRequest.Request3.s2)
}
inline std::string* Request3::mutable_s2() {
  std::string* _s = _internal_mutable_s2();
  // @@protoc_insertion_point(field_mutable:CentralControlRequest.Request3.s2)
  return _s;
}
inline const std::string& Request3::_internal_s2() const {
  return _impl_.s2_.Get();
}
inline void Request3::_internal_set_s2(const std::string& value) {
  
  _impl_.s2_.Set(value, GetArenaForAllocation());
}
inline std::string* Request3::_internal_mutable_s2() {
  
  return _impl_.s2_.Mutable(GetArenaForAllocation());
}
inline std::string* Request3::release_s2() {
  // @@protoc_insertion_point(field_release:CentralControlRequest.Request3.s2)
  return _impl_.s2_.Release();
}
inline void Request3::set_allocated_s2(std::string* s2) {
  if (s2 != nullptr) {
    
  } else {
    
  }
  _impl_.s2_.SetAllocated(s2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s2_.IsDefault()) {
    _impl_.s2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlRequest.Request3.s2)
}

// -------------------------------------------------------------------

// Request4

// string s1 = 1;
inline void Request4::clear_s1() {
  _impl_.s1_.ClearToEmpty();
}
inline const std::string& Request4::s1() const {
  // @@protoc_insertion_point(field_get:CentralControlRequest.Request4.s1)
  return _internal_s1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request4::set_s1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlRequest.Request4.s1)
}
inline std::string* Request4::mutable_s1() {
  std::string* _s = _internal_mutable_s1();
  // @@protoc_insertion_point(field_mutable:CentralControlRequest.Request4.s1)
  return _s;
}
inline const std::string& Request4::_internal_s1() const {
  return _impl_.s1_.Get();
}
inline void Request4::_internal_set_s1(const std::string& value) {
  
  _impl_.s1_.Set(value, GetArenaForAllocation());
}
inline std::string* Request4::_internal_mutable_s1() {
  
  return _impl_.s1_.Mutable(GetArenaForAllocation());
}
inline std::string* Request4::release_s1() {
  // @@protoc_insertion_point(field_release:CentralControlRequest.Request4.s1)
  return _impl_.s1_.Release();
}
inline void Request4::set_allocated_s1(std::string* s1) {
  if (s1 != nullptr) {
    
  } else {
    
  }
  _impl_.s1_.SetAllocated(s1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s1_.IsDefault()) {
    _impl_.s1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlRequest.Request4.s1)
}

// string s2 = 2;
inline void Request4::clear_s2() {
  _impl_.s2_.ClearToEmpty();
}
inline const std::string& Request4::s2() const {
  // @@protoc_insertion_point(field_get:CentralControlRequest.Request4.s2)
  return _internal_s2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request4::set_s2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlRequest.Request4.s2)
}
inline std::string* Request4::mutable_s2() {
  std::string* _s = _internal_mutable_s2();
  // @@protoc_insertion_point(field_mutable:CentralControlRequest.Request4.s2)
  return _s;
}
inline const std::string& Request4::_internal_s2() const {
  return _impl_.s2_.Get();
}
inline void Request4::_internal_set_s2(const std::string& value) {
  
  _impl_.s2_.Set(value, GetArenaForAllocation());
}
inline std::string* Request4::_internal_mutable_s2() {
  
  return _impl_.s2_.Mutable(GetArenaForAllocation());
}
inline std::string* Request4::release_s2() {
  // @@protoc_insertion_point(field_release:CentralControlRequest.Request4.s2)
  return _impl_.s2_.Release();
}
inline void Request4::set_allocated_s2(std::string* s2) {
  if (s2 != nullptr) {
    
  } else {
    
  }
  _impl_.s2_.SetAllocated(s2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s2_.IsDefault()) {
    _impl_.s2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlRequest.Request4.s2)
}

// string s3 = 3;
inline void Request4::clear_s3() {
  _impl_.s3_.ClearToEmpty();
}
inline const std::string& Request4::s3() const {
  // @@protoc_insertion_point(field_get:CentralControlRequest.Request4.s3)
  return _internal_s3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request4::set_s3(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlRequest.Request4.s3)
}
inline std::string* Request4::mutable_s3() {
  std::string* _s = _internal_mutable_s3();
  // @@protoc_insertion_point(field_mutable:CentralControlRequest.Request4.s3)
  return _s;
}
inline const std::string& Request4::_internal_s3() const {
  return _impl_.s3_.Get();
}
inline void Request4::_internal_set_s3(const std::string& value) {
  
  _impl_.s3_.Set(value, GetArenaForAllocation());
}
inline std::string* Request4::_internal_mutable_s3() {
  
  return _impl_.s3_.Mutable(GetArenaForAllocation());
}
inline std::string* Request4::release_s3() {
  // @@protoc_insertion_point(field_release:CentralControlRequest.Request4.s3)
  return _impl_.s3_.Release();
}
inline void Request4::set_allocated_s3(std::string* s3) {
  if (s3 != nullptr) {
    
  } else {
    
  }
  _impl_.s3_.SetAllocated(s3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s3_.IsDefault()) {
    _impl_.s3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlRequest.Request4.s3)
}

// string s4 = 4;
inline void Request4::clear_s4() {
  _impl_.s4_.ClearToEmpty();
}
inline const std::string& Request4::s4() const {
  // @@protoc_insertion_point(field_get:CentralControlRequest.Request4.s4)
  return _internal_s4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request4::set_s4(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s4_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlRequest.Request4.s4)
}
inline std::string* Request4::mutable_s4() {
  std::string* _s = _internal_mutable_s4();
  // @@protoc_insertion_point(field_mutable:CentralControlRequest.Request4.s4)
  return _s;
}
inline const std::string& Request4::_internal_s4() const {
  return _impl_.s4_.Get();
}
inline void Request4::_internal_set_s4(const std::string& value) {
  
  _impl_.s4_.Set(value, GetArenaForAllocation());
}
inline std::string* Request4::_internal_mutable_s4() {
  
  return _impl_.s4_.Mutable(GetArenaForAllocation());
}
inline std::string* Request4::release_s4() {
  // @@protoc_insertion_point(field_release:CentralControlRequest.Request4.s4)
  return _impl_.s4_.Release();
}
inline void Request4::set_allocated_s4(std::string* s4) {
  if (s4 != nullptr) {
    
  } else {
    
  }
  _impl_.s4_.SetAllocated(s4, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s4_.IsDefault()) {
    _impl_.s4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlRequest.Request4.s4)
}

// string s5 = 5;
inline void Request4::clear_s5() {
  _impl_.s5_.ClearToEmpty();
}
inline const std::string& Request4::s5() const {
  // @@protoc_insertion_point(field_get:CentralControlRequest.Request4.s5)
  return _internal_s5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request4::set_s5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s5_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlRequest.Request4.s5)
}
inline std::string* Request4::mutable_s5() {
  std::string* _s = _internal_mutable_s5();
  // @@protoc_insertion_point(field_mutable:CentralControlRequest.Request4.s5)
  return _s;
}
inline const std::string& Request4::_internal_s5() const {
  return _impl_.s5_.Get();
}
inline void Request4::_internal_set_s5(const std::string& value) {
  
  _impl_.s5_.Set(value, GetArenaForAllocation());
}
inline std::string* Request4::_internal_mutable_s5() {
  
  return _impl_.s5_.Mutable(GetArenaForAllocation());
}
inline std::string* Request4::release_s5() {
  // @@protoc_insertion_point(field_release:CentralControlRequest.Request4.s5)
  return _impl_.s5_.Release();
}
inline void Request4::set_allocated_s5(std::string* s5) {
  if (s5 != nullptr) {
    
  } else {
    
  }
  _impl_.s5_.SetAllocated(s5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s5_.IsDefault()) {
    _impl_.s5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlRequest.Request4.s5)
}

// string s6 = 6;
inline void Request4::clear_s6() {
  _impl_.s6_.ClearToEmpty();
}
inline const std::string& Request4::s6() const {
  // @@protoc_insertion_point(field_get:CentralControlRequest.Request4.s6)
  return _internal_s6();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request4::set_s6(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s6_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlRequest.Request4.s6)
}
inline std::string* Request4::mutable_s6() {
  std::string* _s = _internal_mutable_s6();
  // @@protoc_insertion_point(field_mutable:CentralControlRequest.Request4.s6)
  return _s;
}
inline const std::string& Request4::_internal_s6() const {
  return _impl_.s6_.Get();
}
inline void Request4::_internal_set_s6(const std::string& value) {
  
  _impl_.s6_.Set(value, GetArenaForAllocation());
}
inline std::string* Request4::_internal_mutable_s6() {
  
  return _impl_.s6_.Mutable(GetArenaForAllocation());
}
inline std::string* Request4::release_s6() {
  // @@protoc_insertion_point(field_release:CentralControlRequest.Request4.s6)
  return _impl_.s6_.Release();
}
inline void Request4::set_allocated_s6(std::string* s6) {
  if (s6 != nullptr) {
    
  } else {
    
  }
  _impl_.s6_.SetAllocated(s6, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s6_.IsDefault()) {
    _impl_.s6_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlRequest.Request4.s6)
}

// -------------------------------------------------------------------

// Request5

// string s1 = 1;
inline void Request5::clear_s1() {
  _impl_.s1_.ClearToEmpty();
}
inline const std::string& Request5::s1() const {
  // @@protoc_insertion_point(field_get:CentralControlRequest.Request5.s1)
  return _internal_s1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request5::set_s1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlRequest.Request5.s1)
}
inline std::string* Request5::mutable_s1() {
  std::string* _s = _internal_mutable_s1();
  // @@protoc_insertion_point(field_mutable:CentralControlRequest.Request5.s1)
  return _s;
}
inline const std::string& Request5::_internal_s1() const {
  return _impl_.s1_.Get();
}
inline void Request5::_internal_set_s1(const std::string& value) {
  
  _impl_.s1_.Set(value, GetArenaForAllocation());
}
inline std::string* Request5::_internal_mutable_s1() {
  
  return _impl_.s1_.Mutable(GetArenaForAllocation());
}
inline std::string* Request5::release_s1() {
  // @@protoc_insertion_point(field_release:CentralControlRequest.Request5.s1)
  return _impl_.s1_.Release();
}
inline void Request5::set_allocated_s1(std::string* s1) {
  if (s1 != nullptr) {
    
  } else {
    
  }
  _impl_.s1_.SetAllocated(s1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s1_.IsDefault()) {
    _impl_.s1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlRequest.Request5.s1)
}

// string s2 = 2;
inline void Request5::clear_s2() {
  _impl_.s2_.ClearToEmpty();
}
inline const std::string& Request5::s2() const {
  // @@protoc_insertion_point(field_get:CentralControlRequest.Request5.s2)
  return _internal_s2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request5::set_s2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlRequest.Request5.s2)
}
inline std::string* Request5::mutable_s2() {
  std::string* _s = _internal_mutable_s2();
  // @@protoc_insertion_point(field_mutable:CentralControlRequest.Request5.s2)
  return _s;
}
inline const std::string& Request5::_internal_s2() const {
  return _impl_.s2_.Get();
}
inline void Request5::_internal_set_s2(const std::string& value) {
  
  _impl_.s2_.Set(value, GetArenaForAllocation());
}
inline std::string* Request5::_internal_mutable_s2() {
  
  return _impl_.s2_.Mutable(GetArenaForAllocation());
}
inline std::string* Request5::release_s2() {
  // @@protoc_insertion_point(field_release:CentralControlRequest.Request5.s2)
  return _impl_.s2_.Release();
}
inline void Request5::set_allocated_s2(std::string* s2) {
  if (s2 != nullptr) {
    
  } else {
    
  }
  _impl_.s2_.SetAllocated(s2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s2_.IsDefault()) {
    _impl_.s2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlRequest.Request5.s2)
}

// string s3 = 3;
inline void Request5::clear_s3() {
  _impl_.s3_.ClearToEmpty();
}
inline const std::string& Request5::s3() const {
  // @@protoc_insertion_point(field_get:CentralControlRequest.Request5.s3)
  return _internal_s3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request5::set_s3(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlRequest.Request5.s3)
}
inline std::string* Request5::mutable_s3() {
  std::string* _s = _internal_mutable_s3();
  // @@protoc_insertion_point(field_mutable:CentralControlRequest.Request5.s3)
  return _s;
}
inline const std::string& Request5::_internal_s3() const {
  return _impl_.s3_.Get();
}
inline void Request5::_internal_set_s3(const std::string& value) {
  
  _impl_.s3_.Set(value, GetArenaForAllocation());
}
inline std::string* Request5::_internal_mutable_s3() {
  
  return _impl_.s3_.Mutable(GetArenaForAllocation());
}
inline std::string* Request5::release_s3() {
  // @@protoc_insertion_point(field_release:CentralControlRequest.Request5.s3)
  return _impl_.s3_.Release();
}
inline void Request5::set_allocated_s3(std::string* s3) {
  if (s3 != nullptr) {
    
  } else {
    
  }
  _impl_.s3_.SetAllocated(s3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s3_.IsDefault()) {
    _impl_.s3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlRequest.Request5.s3)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CentralControlRequest

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CentralControlRequest_2eproto
