// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: CentralControlResponse.proto

#include "CentralControlResponse.pb.h"
#include "CentralControlResponse.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace CentralControlResponse {

static const char* CentralControlResponse_method_names[] = {
  "/CentralControlResponse.CentralControlResponse/HeartBeatResp",
  "/CentralControlResponse.CentralControlResponse/ScreenBrightOutResp",
  "/CentralControlResponse.CentralControlResponse/WIFICtrlResp",
  "/CentralControlResponse.CentralControlResponse/NoticeAppShutdownReport",
  "/CentralControlResponse.CentralControlResponse/PowerAmplifierVolumeCtrlResp",
  "/CentralControlResponse.CentralControlResponse/PowerAmplifierModeCtrlResp",
  "/CentralControlResponse.CentralControlResponse/TakePutPenReport",
  "/CentralControlResponse.CentralControlResponse/LightIntensityReport",
  "/CentralControlResponse.CentralControlResponse/HumitureDataReport",
  "/CentralControlResponse.CentralControlResponse/BodySensorReport",
  "/CentralControlResponse.CentralControlResponse/N640PicShowResp",
  "/CentralControlResponse.CentralControlResponse/N640ScreenShotResp",
  "/CentralControlResponse.CentralControlResponse/SignalSwitchResp",
  "/CentralControlResponse.CentralControlResponse/ResolutionResp",
  "/CentralControlResponse.CentralControlResponse/HasSignalResp",
  "/CentralControlResponse.CentralControlResponse/PowerAmplifierVolumeQueryResp",
  "/CentralControlResponse.CentralControlResponse/PowerAmplifierModeQueryResp",
  "/CentralControlResponse.CentralControlResponse/StatusQueryResp",
  "/CentralControlResponse.CentralControlResponse/SetCtCtrlStatusResp",
  "/CentralControlResponse.CentralControlResponse/RespSetSoundSrc",
  "/CentralControlResponse.CentralControlResponse/RespSetDevInVolume",
  "/CentralControlResponse.CentralControlResponse/TouchData",
  "/CentralControlResponse.CentralControlResponse/TouchPointNumber",
};

std::unique_ptr< CentralControlResponse::Stub> CentralControlResponse::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CentralControlResponse::Stub> stub(new CentralControlResponse::Stub(channel, options));
  return stub;
}

CentralControlResponse::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_HeartBeatResp_(CentralControlResponse_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScreenBrightOutResp_(CentralControlResponse_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WIFICtrlResp_(CentralControlResponse_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NoticeAppShutdownReport_(CentralControlResponse_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PowerAmplifierVolumeCtrlResp_(CentralControlResponse_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PowerAmplifierModeCtrlResp_(CentralControlResponse_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TakePutPenReport_(CentralControlResponse_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LightIntensityReport_(CentralControlResponse_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HumitureDataReport_(CentralControlResponse_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BodySensorReport_(CentralControlResponse_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_N640PicShowResp_(CentralControlResponse_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_N640ScreenShotResp_(CentralControlResponse_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignalSwitchResp_(CentralControlResponse_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResolutionResp_(CentralControlResponse_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HasSignalResp_(CentralControlResponse_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PowerAmplifierVolumeQueryResp_(CentralControlResponse_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PowerAmplifierModeQueryResp_(CentralControlResponse_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StatusQueryResp_(CentralControlResponse_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCtCtrlStatusResp_(CentralControlResponse_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RespSetSoundSrc_(CentralControlResponse_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RespSetDevInVolume_(CentralControlResponse_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TouchData_(CentralControlResponse_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_TouchPointNumber_(CentralControlResponse_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status CentralControlResponse::Stub::HeartBeatResp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response1* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HeartBeatResp_, context, request, response);
}

void CentralControlResponse::Stub::async::HeartBeatResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response1* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HeartBeatResp_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::HeartBeatResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response1* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HeartBeatResp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response1>* CentralControlResponse::Stub::PrepareAsyncHeartBeatRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HeartBeatResp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response1>* CentralControlResponse::Stub::AsyncHeartBeatRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHeartBeatRespRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::ScreenBrightOutResp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response5* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScreenBrightOutResp_, context, request, response);
}

void CentralControlResponse::Stub::async::ScreenBrightOutResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScreenBrightOutResp_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::ScreenBrightOutResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScreenBrightOutResp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response5>* CentralControlResponse::Stub::PrepareAsyncScreenBrightOutRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response5, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScreenBrightOutResp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response5>* CentralControlResponse::Stub::AsyncScreenBrightOutRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScreenBrightOutRespRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::WIFICtrlResp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response5* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WIFICtrlResp_, context, request, response);
}

void CentralControlResponse::Stub::async::WIFICtrlResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WIFICtrlResp_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::WIFICtrlResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WIFICtrlResp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response5>* CentralControlResponse::Stub::PrepareAsyncWIFICtrlRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response5, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WIFICtrlResp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response5>* CentralControlResponse::Stub::AsyncWIFICtrlRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWIFICtrlRespRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::NoticeAppShutdownReport(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response3* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NoticeAppShutdownReport_, context, request, response);
}

void CentralControlResponse::Stub::async::NoticeAppShutdownReport(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response3* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NoticeAppShutdownReport_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::NoticeAppShutdownReport(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response3* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NoticeAppShutdownReport_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response3>* CentralControlResponse::Stub::PrepareAsyncNoticeAppShutdownReportRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NoticeAppShutdownReport_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response3>* CentralControlResponse::Stub::AsyncNoticeAppShutdownReportRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNoticeAppShutdownReportRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::PowerAmplifierVolumeCtrlResp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response1* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PowerAmplifierVolumeCtrlResp_, context, request, response);
}

void CentralControlResponse::Stub::async::PowerAmplifierVolumeCtrlResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response1* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PowerAmplifierVolumeCtrlResp_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::PowerAmplifierVolumeCtrlResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response1* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PowerAmplifierVolumeCtrlResp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response1>* CentralControlResponse::Stub::PrepareAsyncPowerAmplifierVolumeCtrlRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PowerAmplifierVolumeCtrlResp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response1>* CentralControlResponse::Stub::AsyncPowerAmplifierVolumeCtrlRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPowerAmplifierVolumeCtrlRespRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::PowerAmplifierModeCtrlResp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response1* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PowerAmplifierModeCtrlResp_, context, request, response);
}

void CentralControlResponse::Stub::async::PowerAmplifierModeCtrlResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response1* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PowerAmplifierModeCtrlResp_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::PowerAmplifierModeCtrlResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response1* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PowerAmplifierModeCtrlResp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response1>* CentralControlResponse::Stub::PrepareAsyncPowerAmplifierModeCtrlRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PowerAmplifierModeCtrlResp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response1>* CentralControlResponse::Stub::AsyncPowerAmplifierModeCtrlRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPowerAmplifierModeCtrlRespRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::TakePutPenReport(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response3* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TakePutPenReport_, context, request, response);
}

void CentralControlResponse::Stub::async::TakePutPenReport(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response3* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TakePutPenReport_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::TakePutPenReport(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response3* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TakePutPenReport_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response3>* CentralControlResponse::Stub::PrepareAsyncTakePutPenReportRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TakePutPenReport_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response3>* CentralControlResponse::Stub::AsyncTakePutPenReportRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTakePutPenReportRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::LightIntensityReport(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response3* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LightIntensityReport_, context, request, response);
}

void CentralControlResponse::Stub::async::LightIntensityReport(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response3* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LightIntensityReport_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::LightIntensityReport(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response3* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LightIntensityReport_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response3>* CentralControlResponse::Stub::PrepareAsyncLightIntensityReportRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LightIntensityReport_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response3>* CentralControlResponse::Stub::AsyncLightIntensityReportRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLightIntensityReportRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::HumitureDataReport(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response2* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HumitureDataReport_, context, request, response);
}

void CentralControlResponse::Stub::async::HumitureDataReport(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response2* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HumitureDataReport_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::HumitureDataReport(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response2* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HumitureDataReport_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response2>* CentralControlResponse::Stub::PrepareAsyncHumitureDataReportRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response2, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HumitureDataReport_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response2>* CentralControlResponse::Stub::AsyncHumitureDataReportRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHumitureDataReportRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::BodySensorReport(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response1* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BodySensorReport_, context, request, response);
}

void CentralControlResponse::Stub::async::BodySensorReport(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response1* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BodySensorReport_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::BodySensorReport(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response1* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BodySensorReport_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response1>* CentralControlResponse::Stub::PrepareAsyncBodySensorReportRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BodySensorReport_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response1>* CentralControlResponse::Stub::AsyncBodySensorReportRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBodySensorReportRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::N640PicShowResp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response5* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_N640PicShowResp_, context, request, response);
}

void CentralControlResponse::Stub::async::N640PicShowResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_N640PicShowResp_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::N640PicShowResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_N640PicShowResp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response5>* CentralControlResponse::Stub::PrepareAsyncN640PicShowRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response5, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_N640PicShowResp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response5>* CentralControlResponse::Stub::AsyncN640PicShowRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncN640PicShowRespRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::N640ScreenShotResp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response5* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_N640ScreenShotResp_, context, request, response);
}

void CentralControlResponse::Stub::async::N640ScreenShotResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_N640ScreenShotResp_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::N640ScreenShotResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_N640ScreenShotResp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response5>* CentralControlResponse::Stub::PrepareAsyncN640ScreenShotRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response5, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_N640ScreenShotResp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response5>* CentralControlResponse::Stub::AsyncN640ScreenShotRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncN640ScreenShotRespRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::SignalSwitchResp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response4* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response4, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignalSwitchResp_, context, request, response);
}

void CentralControlResponse::Stub::async::SignalSwitchResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response4* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response4, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignalSwitchResp_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::SignalSwitchResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response4* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignalSwitchResp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response4>* CentralControlResponse::Stub::PrepareAsyncSignalSwitchRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response4, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignalSwitchResp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response4>* CentralControlResponse::Stub::AsyncSignalSwitchRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignalSwitchRespRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::ResolutionResp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response2* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResolutionResp_, context, request, response);
}

void CentralControlResponse::Stub::async::ResolutionResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response2* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResolutionResp_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::ResolutionResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response2* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResolutionResp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response2>* CentralControlResponse::Stub::PrepareAsyncResolutionRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response2, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResolutionResp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response2>* CentralControlResponse::Stub::AsyncResolutionRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResolutionRespRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::HasSignalResp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response2* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HasSignalResp_, context, request, response);
}

void CentralControlResponse::Stub::async::HasSignalResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response2* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HasSignalResp_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::HasSignalResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response2* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HasSignalResp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response2>* CentralControlResponse::Stub::PrepareAsyncHasSignalRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response2, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HasSignalResp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response2>* CentralControlResponse::Stub::AsyncHasSignalRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHasSignalRespRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::PowerAmplifierVolumeQueryResp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response5* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PowerAmplifierVolumeQueryResp_, context, request, response);
}

void CentralControlResponse::Stub::async::PowerAmplifierVolumeQueryResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PowerAmplifierVolumeQueryResp_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::PowerAmplifierVolumeQueryResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PowerAmplifierVolumeQueryResp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response5>* CentralControlResponse::Stub::PrepareAsyncPowerAmplifierVolumeQueryRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response5, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PowerAmplifierVolumeQueryResp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response5>* CentralControlResponse::Stub::AsyncPowerAmplifierVolumeQueryRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPowerAmplifierVolumeQueryRespRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::PowerAmplifierModeQueryResp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response5* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PowerAmplifierModeQueryResp_, context, request, response);
}

void CentralControlResponse::Stub::async::PowerAmplifierModeQueryResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PowerAmplifierModeQueryResp_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::PowerAmplifierModeQueryResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PowerAmplifierModeQueryResp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response5>* CentralControlResponse::Stub::PrepareAsyncPowerAmplifierModeQueryRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response5, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PowerAmplifierModeQueryResp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response5>* CentralControlResponse::Stub::AsyncPowerAmplifierModeQueryRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPowerAmplifierModeQueryRespRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::StatusQueryResp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response3* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StatusQueryResp_, context, request, response);
}

void CentralControlResponse::Stub::async::StatusQueryResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response3* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StatusQueryResp_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::StatusQueryResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response3* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StatusQueryResp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response3>* CentralControlResponse::Stub::PrepareAsyncStatusQueryRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StatusQueryResp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response3>* CentralControlResponse::Stub::AsyncStatusQueryRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatusQueryRespRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::SetCtCtrlStatusResp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response5* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCtCtrlStatusResp_, context, request, response);
}

void CentralControlResponse::Stub::async::SetCtCtrlStatusResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCtCtrlStatusResp_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::SetCtCtrlStatusResp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCtCtrlStatusResp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response5>* CentralControlResponse::Stub::PrepareAsyncSetCtCtrlStatusRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response5, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCtCtrlStatusResp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response5>* CentralControlResponse::Stub::AsyncSetCtCtrlStatusRespRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCtCtrlStatusRespRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::RespSetSoundSrc(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response5* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RespSetSoundSrc_, context, request, response);
}

void CentralControlResponse::Stub::async::RespSetSoundSrc(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespSetSoundSrc_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::RespSetSoundSrc(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespSetSoundSrc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response5>* CentralControlResponse::Stub::PrepareAsyncRespSetSoundSrcRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response5, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RespSetSoundSrc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response5>* CentralControlResponse::Stub::AsyncRespSetSoundSrcRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRespSetSoundSrcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlResponse::Stub::RespSetDevInVolume(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CentralControlResponse::Response4* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response4, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RespSetDevInVolume_, context, request, response);
}

void CentralControlResponse::Stub::async::RespSetDevInVolume(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response4* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CentralControlResponse::Response4, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespSetDevInVolume_, context, request, response, std::move(f));
}

void CentralControlResponse::Stub::async::RespSetDevInVolume(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response4* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespSetDevInVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response4>* CentralControlResponse::Stub::PrepareAsyncRespSetDevInVolumeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CentralControlResponse::Response4, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RespSetDevInVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CentralControlResponse::Response4>* CentralControlResponse::Stub::AsyncRespSetDevInVolumeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRespSetDevInVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::CentralControlResponse::Response7>* CentralControlResponse::Stub::TouchDataRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::CentralControlResponse::Response7>::Create(channel_.get(), rpcmethod_TouchData_, context, request);
}

void CentralControlResponse::Stub::async::TouchData(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::CentralControlResponse::Response7>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::CentralControlResponse::Response7>::Create(stub_->channel_.get(), stub_->rpcmethod_TouchData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::CentralControlResponse::Response7>* CentralControlResponse::Stub::AsyncTouchDataRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::CentralControlResponse::Response7>::Create(channel_.get(), cq, rpcmethod_TouchData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::CentralControlResponse::Response7>* CentralControlResponse::Stub::PrepareAsyncTouchDataRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::CentralControlResponse::Response7>::Create(channel_.get(), cq, rpcmethod_TouchData_, context, request, false, nullptr);
}

::grpc::ClientReader< ::CentralControlResponse::Response6>* CentralControlResponse::Stub::TouchPointNumberRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::CentralControlResponse::Response6>::Create(channel_.get(), rpcmethod_TouchPointNumber_, context, request);
}

void CentralControlResponse::Stub::async::TouchPointNumber(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::CentralControlResponse::Response6>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::CentralControlResponse::Response6>::Create(stub_->channel_.get(), stub_->rpcmethod_TouchPointNumber_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::CentralControlResponse::Response6>* CentralControlResponse::Stub::AsyncTouchPointNumberRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::CentralControlResponse::Response6>::Create(channel_.get(), cq, rpcmethod_TouchPointNumber_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::CentralControlResponse::Response6>* CentralControlResponse::Stub::PrepareAsyncTouchPointNumberRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::CentralControlResponse::Response6>::Create(channel_.get(), cq, rpcmethod_TouchPointNumber_, context, request, false, nullptr);
}

CentralControlResponse::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response1* resp) {
               return service->HeartBeatResp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response5* resp) {
               return service->ScreenBrightOutResp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response5* resp) {
               return service->WIFICtrlResp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response3* resp) {
               return service->NoticeAppShutdownReport(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response1* resp) {
               return service->PowerAmplifierVolumeCtrlResp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response1* resp) {
               return service->PowerAmplifierModeCtrlResp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response3* resp) {
               return service->TakePutPenReport(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response3* resp) {
               return service->LightIntensityReport(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response2* resp) {
               return service->HumitureDataReport(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response1* resp) {
               return service->BodySensorReport(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response5* resp) {
               return service->N640PicShowResp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response5* resp) {
               return service->N640ScreenShotResp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response4, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response4* resp) {
               return service->SignalSwitchResp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response2* resp) {
               return service->ResolutionResp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response2* resp) {
               return service->HasSignalResp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response5* resp) {
               return service->PowerAmplifierVolumeQueryResp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response5* resp) {
               return service->PowerAmplifierModeQueryResp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response3* resp) {
               return service->StatusQueryResp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response5* resp) {
               return service->SetCtCtrlStatusResp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response5* resp) {
               return service->RespSetSoundSrc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response4, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CentralControlResponse::Response4* resp) {
               return service->RespSetDevInVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[21],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response7>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::CentralControlResponse::Response7>* writer) {
               return service->TouchData(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlResponse_method_names[22],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CentralControlResponse::Service, ::google::protobuf::Empty, ::CentralControlResponse::Response6>(
          [](CentralControlResponse::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::CentralControlResponse::Response6>* writer) {
               return service->TouchPointNumber(ctx, req, writer);
             }, this)));
}

CentralControlResponse::Service::~Service() {
}

::grpc::Status CentralControlResponse::Service::HeartBeatResp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response1* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::ScreenBrightOutResp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::WIFICtrlResp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::NoticeAppShutdownReport(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response3* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::PowerAmplifierVolumeCtrlResp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response1* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::PowerAmplifierModeCtrlResp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response1* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::TakePutPenReport(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response3* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::LightIntensityReport(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response3* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::HumitureDataReport(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response2* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::BodySensorReport(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response1* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::N640PicShowResp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::N640ScreenShotResp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::SignalSwitchResp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response4* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::ResolutionResp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response2* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::HasSignalResp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response2* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::PowerAmplifierVolumeQueryResp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::PowerAmplifierModeQueryResp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::StatusQueryResp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response3* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::SetCtCtrlStatusResp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::RespSetSoundSrc(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response5* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::RespSetDevInVolume(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CentralControlResponse::Response4* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::TouchData(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::CentralControlResponse::Response7>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlResponse::Service::TouchPointNumber(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::CentralControlResponse::Response6>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace CentralControlResponse

