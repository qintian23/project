// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CentralControlResponse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CentralControlResponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CentralControlResponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CentralControlResponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CentralControlResponse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CentralControlResponse_2eproto;
namespace CentralControlResponse {
class Response1;
struct Response1DefaultTypeInternal;
extern Response1DefaultTypeInternal _Response1_default_instance_;
class Response2;
struct Response2DefaultTypeInternal;
extern Response2DefaultTypeInternal _Response2_default_instance_;
class Response3;
struct Response3DefaultTypeInternal;
extern Response3DefaultTypeInternal _Response3_default_instance_;
class Response4;
struct Response4DefaultTypeInternal;
extern Response4DefaultTypeInternal _Response4_default_instance_;
class Response5;
struct Response5DefaultTypeInternal;
extern Response5DefaultTypeInternal _Response5_default_instance_;
class Response6;
struct Response6DefaultTypeInternal;
extern Response6DefaultTypeInternal _Response6_default_instance_;
class Response7;
struct Response7DefaultTypeInternal;
extern Response7DefaultTypeInternal _Response7_default_instance_;
}  // namespace CentralControlResponse
PROTOBUF_NAMESPACE_OPEN
template<> ::CentralControlResponse::Response1* Arena::CreateMaybeMessage<::CentralControlResponse::Response1>(Arena*);
template<> ::CentralControlResponse::Response2* Arena::CreateMaybeMessage<::CentralControlResponse::Response2>(Arena*);
template<> ::CentralControlResponse::Response3* Arena::CreateMaybeMessage<::CentralControlResponse::Response3>(Arena*);
template<> ::CentralControlResponse::Response4* Arena::CreateMaybeMessage<::CentralControlResponse::Response4>(Arena*);
template<> ::CentralControlResponse::Response5* Arena::CreateMaybeMessage<::CentralControlResponse::Response5>(Arena*);
template<> ::CentralControlResponse::Response6* Arena::CreateMaybeMessage<::CentralControlResponse::Response6>(Arena*);
template<> ::CentralControlResponse::Response7* Arena::CreateMaybeMessage<::CentralControlResponse::Response7>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CentralControlResponse {

// ===================================================================

class Response1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CentralControlResponse.Response1) */ {
 public:
  inline Response1() : Response1(nullptr) {}
  ~Response1() override;
  explicit PROTOBUF_CONSTEXPR Response1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response1(const Response1& from);
  Response1(Response1&& from) noexcept
    : Response1() {
    *this = ::std::move(from);
  }

  inline Response1& operator=(const Response1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response1& operator=(Response1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response1& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response1* internal_default_instance() {
    return reinterpret_cast<const Response1*>(
               &_Response1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Response1& a, Response1& b) {
    a.Swap(&b);
  }
  inline void Swap(Response1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response1& from) {
    Response1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CentralControlResponse.Response1";
  }
  protected:
  explicit Response1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kB1FieldNumber = 1,
  };
  // bool b1 = 1;
  void clear_b1();
  bool b1() const;
  void set_b1(bool value);
  private:
  bool _internal_b1() const;
  void _internal_set_b1(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CentralControlResponse.Response1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool b1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CentralControlResponse_2eproto;
};
// -------------------------------------------------------------------

class Response2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CentralControlResponse.Response2) */ {
 public:
  inline Response2() : Response2(nullptr) {}
  ~Response2() override;
  explicit PROTOBUF_CONSTEXPR Response2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response2(const Response2& from);
  Response2(Response2&& from) noexcept
    : Response2() {
    *this = ::std::move(from);
  }

  inline Response2& operator=(const Response2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response2& operator=(Response2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response2* internal_default_instance() {
    return reinterpret_cast<const Response2*>(
               &_Response2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response2& a, Response2& b) {
    a.Swap(&b);
  }
  inline void Swap(Response2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response2& from) {
    Response2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CentralControlResponse.Response2";
  }
  protected:
  explicit Response2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kT1FieldNumber = 1,
    kT2FieldNumber = 2,
  };
  // string t1 = 1;
  void clear_t1();
  const std::string& t1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_t1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_t1();
  PROTOBUF_NODISCARD std::string* release_t1();
  void set_allocated_t1(std::string* t1);
  private:
  const std::string& _internal_t1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_t1(const std::string& value);
  std::string* _internal_mutable_t1();
  public:

  // string t2 = 2;
  void clear_t2();
  const std::string& t2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_t2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_t2();
  PROTOBUF_NODISCARD std::string* release_t2();
  void set_allocated_t2(std::string* t2);
  private:
  const std::string& _internal_t2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_t2(const std::string& value);
  std::string* _internal_mutable_t2();
  public:

  // @@protoc_insertion_point(class_scope:CentralControlResponse.Response2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr t1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr t2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CentralControlResponse_2eproto;
};
// -------------------------------------------------------------------

class Response3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CentralControlResponse.Response3) */ {
 public:
  inline Response3() : Response3(nullptr) {}
  ~Response3() override;
  explicit PROTOBUF_CONSTEXPR Response3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response3(const Response3& from);
  Response3(Response3&& from) noexcept
    : Response3() {
    *this = ::std::move(from);
  }

  inline Response3& operator=(const Response3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response3& operator=(Response3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response3* internal_default_instance() {
    return reinterpret_cast<const Response3*>(
               &_Response3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response3& a, Response3& b) {
    a.Swap(&b);
  }
  inline void Swap(Response3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response3& from) {
    Response3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CentralControlResponse.Response3";
  }
  protected:
  explicit Response3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kT1FieldNumber = 1,
  };
  // string t1 = 1;
  void clear_t1();
  const std::string& t1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_t1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_t1();
  PROTOBUF_NODISCARD std::string* release_t1();
  void set_allocated_t1(std::string* t1);
  private:
  const std::string& _internal_t1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_t1(const std::string& value);
  std::string* _internal_mutable_t1();
  public:

  // @@protoc_insertion_point(class_scope:CentralControlResponse.Response3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr t1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CentralControlResponse_2eproto;
};
// -------------------------------------------------------------------

class Response4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CentralControlResponse.Response4) */ {
 public:
  inline Response4() : Response4(nullptr) {}
  ~Response4() override;
  explicit PROTOBUF_CONSTEXPR Response4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response4(const Response4& from);
  Response4(Response4&& from) noexcept
    : Response4() {
    *this = ::std::move(from);
  }

  inline Response4& operator=(const Response4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response4& operator=(Response4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response4* internal_default_instance() {
    return reinterpret_cast<const Response4*>(
               &_Response4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Response4& a, Response4& b) {
    a.Swap(&b);
  }
  inline void Swap(Response4* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response4>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response4& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response4& from) {
    Response4::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response4* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CentralControlResponse.Response4";
  }
  protected:
  explicit Response4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kT1FieldNumber = 1,
    kT2FieldNumber = 2,
    kB1FieldNumber = 3,
  };
  // string t1 = 1;
  void clear_t1();
  const std::string& t1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_t1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_t1();
  PROTOBUF_NODISCARD std::string* release_t1();
  void set_allocated_t1(std::string* t1);
  private:
  const std::string& _internal_t1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_t1(const std::string& value);
  std::string* _internal_mutable_t1();
  public:

  // string t2 = 2;
  void clear_t2();
  const std::string& t2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_t2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_t2();
  PROTOBUF_NODISCARD std::string* release_t2();
  void set_allocated_t2(std::string* t2);
  private:
  const std::string& _internal_t2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_t2(const std::string& value);
  std::string* _internal_mutable_t2();
  public:

  // bool b1 = 3;
  void clear_b1();
  bool b1() const;
  void set_b1(bool value);
  private:
  bool _internal_b1() const;
  void _internal_set_b1(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CentralControlResponse.Response4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr t1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr t2_;
    bool b1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CentralControlResponse_2eproto;
};
// -------------------------------------------------------------------

class Response5 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CentralControlResponse.Response5) */ {
 public:
  inline Response5() : Response5(nullptr) {}
  ~Response5() override;
  explicit PROTOBUF_CONSTEXPR Response5(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response5(const Response5& from);
  Response5(Response5&& from) noexcept
    : Response5() {
    *this = ::std::move(from);
  }

  inline Response5& operator=(const Response5& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response5& operator=(Response5&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response5& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response5* internal_default_instance() {
    return reinterpret_cast<const Response5*>(
               &_Response5_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Response5& a, Response5& b) {
    a.Swap(&b);
  }
  inline void Swap(Response5* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response5* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response5* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response5>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response5& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response5& from) {
    Response5::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response5* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CentralControlResponse.Response5";
  }
  protected:
  explicit Response5(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kT1FieldNumber = 1,
    kB1FieldNumber = 2,
  };
  // string t1 = 1;
  void clear_t1();
  const std::string& t1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_t1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_t1();
  PROTOBUF_NODISCARD std::string* release_t1();
  void set_allocated_t1(std::string* t1);
  private:
  const std::string& _internal_t1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_t1(const std::string& value);
  std::string* _internal_mutable_t1();
  public:

  // bool b1 = 2;
  void clear_b1();
  bool b1() const;
  void set_b1(bool value);
  private:
  bool _internal_b1() const;
  void _internal_set_b1(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CentralControlResponse.Response5)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr t1_;
    bool b1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CentralControlResponse_2eproto;
};
// -------------------------------------------------------------------

class Response6 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CentralControlResponse.Response6) */ {
 public:
  inline Response6() : Response6(nullptr) {}
  ~Response6() override;
  explicit PROTOBUF_CONSTEXPR Response6(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response6(const Response6& from);
  Response6(Response6&& from) noexcept
    : Response6() {
    *this = ::std::move(from);
  }

  inline Response6& operator=(const Response6& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response6& operator=(Response6&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response6& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response6* internal_default_instance() {
    return reinterpret_cast<const Response6*>(
               &_Response6_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Response6& a, Response6& b) {
    a.Swap(&b);
  }
  inline void Swap(Response6* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response6* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response6* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response6>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response6& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response6& from) {
    Response6::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response6* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CentralControlResponse.Response6";
  }
  protected:
  explicit Response6(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kI1FieldNumber = 1,
  };
  // int32 i1 = 1;
  void clear_i1();
  int32_t i1() const;
  void set_i1(int32_t value);
  private:
  int32_t _internal_i1() const;
  void _internal_set_i1(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CentralControlResponse.Response6)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t i1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CentralControlResponse_2eproto;
};
// -------------------------------------------------------------------

class Response7 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CentralControlResponse.Response7) */ {
 public:
  inline Response7() : Response7(nullptr) {}
  ~Response7() override;
  explicit PROTOBUF_CONSTEXPR Response7(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response7(const Response7& from);
  Response7(Response7&& from) noexcept
    : Response7() {
    *this = ::std::move(from);
  }

  inline Response7& operator=(const Response7& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response7& operator=(Response7&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response7& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response7* internal_default_instance() {
    return reinterpret_cast<const Response7*>(
               &_Response7_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Response7& a, Response7& b) {
    a.Swap(&b);
  }
  inline void Swap(Response7* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response7* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response7* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response7>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response7& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response7& from) {
    Response7::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response7* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CentralControlResponse.Response7";
  }
  protected:
  explicit Response7(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kXPointFieldNumber = 3,
    kYPointFieldNumber = 4,
    kWidthFieldNumber = 5,
    kHeightFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 xPoint = 3;
  void clear_xpoint();
  int32_t xpoint() const;
  void set_xpoint(int32_t value);
  private:
  int32_t _internal_xpoint() const;
  void _internal_set_xpoint(int32_t value);
  public:

  // int32 yPoint = 4;
  void clear_ypoint();
  int32_t ypoint() const;
  void set_ypoint(int32_t value);
  private:
  int32_t _internal_ypoint() const;
  void _internal_set_ypoint(int32_t value);
  public:

  // int32 width = 5;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 6;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CentralControlResponse.Response7)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    int32_t xpoint_;
    int32_t ypoint_;
    int32_t width_;
    int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CentralControlResponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Response1

// bool b1 = 1;
inline void Response1::clear_b1() {
  _impl_.b1_ = false;
}
inline bool Response1::_internal_b1() const {
  return _impl_.b1_;
}
inline bool Response1::b1() const {
  // @@protoc_insertion_point(field_get:CentralControlResponse.Response1.b1)
  return _internal_b1();
}
inline void Response1::_internal_set_b1(bool value) {
  
  _impl_.b1_ = value;
}
inline void Response1::set_b1(bool value) {
  _internal_set_b1(value);
  // @@protoc_insertion_point(field_set:CentralControlResponse.Response1.b1)
}

// -------------------------------------------------------------------

// Response2

// string t1 = 1;
inline void Response2::clear_t1() {
  _impl_.t1_.ClearToEmpty();
}
inline const std::string& Response2::t1() const {
  // @@protoc_insertion_point(field_get:CentralControlResponse.Response2.t1)
  return _internal_t1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response2::set_t1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.t1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlResponse.Response2.t1)
}
inline std::string* Response2::mutable_t1() {
  std::string* _s = _internal_mutable_t1();
  // @@protoc_insertion_point(field_mutable:CentralControlResponse.Response2.t1)
  return _s;
}
inline const std::string& Response2::_internal_t1() const {
  return _impl_.t1_.Get();
}
inline void Response2::_internal_set_t1(const std::string& value) {
  
  _impl_.t1_.Set(value, GetArenaForAllocation());
}
inline std::string* Response2::_internal_mutable_t1() {
  
  return _impl_.t1_.Mutable(GetArenaForAllocation());
}
inline std::string* Response2::release_t1() {
  // @@protoc_insertion_point(field_release:CentralControlResponse.Response2.t1)
  return _impl_.t1_.Release();
}
inline void Response2::set_allocated_t1(std::string* t1) {
  if (t1 != nullptr) {
    
  } else {
    
  }
  _impl_.t1_.SetAllocated(t1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.t1_.IsDefault()) {
    _impl_.t1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlResponse.Response2.t1)
}

// string t2 = 2;
inline void Response2::clear_t2() {
  _impl_.t2_.ClearToEmpty();
}
inline const std::string& Response2::t2() const {
  // @@protoc_insertion_point(field_get:CentralControlResponse.Response2.t2)
  return _internal_t2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response2::set_t2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.t2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlResponse.Response2.t2)
}
inline std::string* Response2::mutable_t2() {
  std::string* _s = _internal_mutable_t2();
  // @@protoc_insertion_point(field_mutable:CentralControlResponse.Response2.t2)
  return _s;
}
inline const std::string& Response2::_internal_t2() const {
  return _impl_.t2_.Get();
}
inline void Response2::_internal_set_t2(const std::string& value) {
  
  _impl_.t2_.Set(value, GetArenaForAllocation());
}
inline std::string* Response2::_internal_mutable_t2() {
  
  return _impl_.t2_.Mutable(GetArenaForAllocation());
}
inline std::string* Response2::release_t2() {
  // @@protoc_insertion_point(field_release:CentralControlResponse.Response2.t2)
  return _impl_.t2_.Release();
}
inline void Response2::set_allocated_t2(std::string* t2) {
  if (t2 != nullptr) {
    
  } else {
    
  }
  _impl_.t2_.SetAllocated(t2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.t2_.IsDefault()) {
    _impl_.t2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlResponse.Response2.t2)
}

// -------------------------------------------------------------------

// Response3

// string t1 = 1;
inline void Response3::clear_t1() {
  _impl_.t1_.ClearToEmpty();
}
inline const std::string& Response3::t1() const {
  // @@protoc_insertion_point(field_get:CentralControlResponse.Response3.t1)
  return _internal_t1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response3::set_t1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.t1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlResponse.Response3.t1)
}
inline std::string* Response3::mutable_t1() {
  std::string* _s = _internal_mutable_t1();
  // @@protoc_insertion_point(field_mutable:CentralControlResponse.Response3.t1)
  return _s;
}
inline const std::string& Response3::_internal_t1() const {
  return _impl_.t1_.Get();
}
inline void Response3::_internal_set_t1(const std::string& value) {
  
  _impl_.t1_.Set(value, GetArenaForAllocation());
}
inline std::string* Response3::_internal_mutable_t1() {
  
  return _impl_.t1_.Mutable(GetArenaForAllocation());
}
inline std::string* Response3::release_t1() {
  // @@protoc_insertion_point(field_release:CentralControlResponse.Response3.t1)
  return _impl_.t1_.Release();
}
inline void Response3::set_allocated_t1(std::string* t1) {
  if (t1 != nullptr) {
    
  } else {
    
  }
  _impl_.t1_.SetAllocated(t1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.t1_.IsDefault()) {
    _impl_.t1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlResponse.Response3.t1)
}

// -------------------------------------------------------------------

// Response4

// string t1 = 1;
inline void Response4::clear_t1() {
  _impl_.t1_.ClearToEmpty();
}
inline const std::string& Response4::t1() const {
  // @@protoc_insertion_point(field_get:CentralControlResponse.Response4.t1)
  return _internal_t1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response4::set_t1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.t1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlResponse.Response4.t1)
}
inline std::string* Response4::mutable_t1() {
  std::string* _s = _internal_mutable_t1();
  // @@protoc_insertion_point(field_mutable:CentralControlResponse.Response4.t1)
  return _s;
}
inline const std::string& Response4::_internal_t1() const {
  return _impl_.t1_.Get();
}
inline void Response4::_internal_set_t1(const std::string& value) {
  
  _impl_.t1_.Set(value, GetArenaForAllocation());
}
inline std::string* Response4::_internal_mutable_t1() {
  
  return _impl_.t1_.Mutable(GetArenaForAllocation());
}
inline std::string* Response4::release_t1() {
  // @@protoc_insertion_point(field_release:CentralControlResponse.Response4.t1)
  return _impl_.t1_.Release();
}
inline void Response4::set_allocated_t1(std::string* t1) {
  if (t1 != nullptr) {
    
  } else {
    
  }
  _impl_.t1_.SetAllocated(t1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.t1_.IsDefault()) {
    _impl_.t1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlResponse.Response4.t1)
}

// string t2 = 2;
inline void Response4::clear_t2() {
  _impl_.t2_.ClearToEmpty();
}
inline const std::string& Response4::t2() const {
  // @@protoc_insertion_point(field_get:CentralControlResponse.Response4.t2)
  return _internal_t2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response4::set_t2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.t2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlResponse.Response4.t2)
}
inline std::string* Response4::mutable_t2() {
  std::string* _s = _internal_mutable_t2();
  // @@protoc_insertion_point(field_mutable:CentralControlResponse.Response4.t2)
  return _s;
}
inline const std::string& Response4::_internal_t2() const {
  return _impl_.t2_.Get();
}
inline void Response4::_internal_set_t2(const std::string& value) {
  
  _impl_.t2_.Set(value, GetArenaForAllocation());
}
inline std::string* Response4::_internal_mutable_t2() {
  
  return _impl_.t2_.Mutable(GetArenaForAllocation());
}
inline std::string* Response4::release_t2() {
  // @@protoc_insertion_point(field_release:CentralControlResponse.Response4.t2)
  return _impl_.t2_.Release();
}
inline void Response4::set_allocated_t2(std::string* t2) {
  if (t2 != nullptr) {
    
  } else {
    
  }
  _impl_.t2_.SetAllocated(t2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.t2_.IsDefault()) {
    _impl_.t2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlResponse.Response4.t2)
}

// bool b1 = 3;
inline void Response4::clear_b1() {
  _impl_.b1_ = false;
}
inline bool Response4::_internal_b1() const {
  return _impl_.b1_;
}
inline bool Response4::b1() const {
  // @@protoc_insertion_point(field_get:CentralControlResponse.Response4.b1)
  return _internal_b1();
}
inline void Response4::_internal_set_b1(bool value) {
  
  _impl_.b1_ = value;
}
inline void Response4::set_b1(bool value) {
  _internal_set_b1(value);
  // @@protoc_insertion_point(field_set:CentralControlResponse.Response4.b1)
}

// -------------------------------------------------------------------

// Response5

// string t1 = 1;
inline void Response5::clear_t1() {
  _impl_.t1_.ClearToEmpty();
}
inline const std::string& Response5::t1() const {
  // @@protoc_insertion_point(field_get:CentralControlResponse.Response5.t1)
  return _internal_t1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response5::set_t1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.t1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlResponse.Response5.t1)
}
inline std::string* Response5::mutable_t1() {
  std::string* _s = _internal_mutable_t1();
  // @@protoc_insertion_point(field_mutable:CentralControlResponse.Response5.t1)
  return _s;
}
inline const std::string& Response5::_internal_t1() const {
  return _impl_.t1_.Get();
}
inline void Response5::_internal_set_t1(const std::string& value) {
  
  _impl_.t1_.Set(value, GetArenaForAllocation());
}
inline std::string* Response5::_internal_mutable_t1() {
  
  return _impl_.t1_.Mutable(GetArenaForAllocation());
}
inline std::string* Response5::release_t1() {
  // @@protoc_insertion_point(field_release:CentralControlResponse.Response5.t1)
  return _impl_.t1_.Release();
}
inline void Response5::set_allocated_t1(std::string* t1) {
  if (t1 != nullptr) {
    
  } else {
    
  }
  _impl_.t1_.SetAllocated(t1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.t1_.IsDefault()) {
    _impl_.t1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlResponse.Response5.t1)
}

// bool b1 = 2;
inline void Response5::clear_b1() {
  _impl_.b1_ = false;
}
inline bool Response5::_internal_b1() const {
  return _impl_.b1_;
}
inline bool Response5::b1() const {
  // @@protoc_insertion_point(field_get:CentralControlResponse.Response5.b1)
  return _internal_b1();
}
inline void Response5::_internal_set_b1(bool value) {
  
  _impl_.b1_ = value;
}
inline void Response5::set_b1(bool value) {
  _internal_set_b1(value);
  // @@protoc_insertion_point(field_set:CentralControlResponse.Response5.b1)
}

// -------------------------------------------------------------------

// Response6

// int32 i1 = 1;
inline void Response6::clear_i1() {
  _impl_.i1_ = 0;
}
inline int32_t Response6::_internal_i1() const {
  return _impl_.i1_;
}
inline int32_t Response6::i1() const {
  // @@protoc_insertion_point(field_get:CentralControlResponse.Response6.i1)
  return _internal_i1();
}
inline void Response6::_internal_set_i1(int32_t value) {
  
  _impl_.i1_ = value;
}
inline void Response6::set_i1(int32_t value) {
  _internal_set_i1(value);
  // @@protoc_insertion_point(field_set:CentralControlResponse.Response6.i1)
}

// -------------------------------------------------------------------

// Response7

// string id = 1;
inline void Response7::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Response7::id() const {
  // @@protoc_insertion_point(field_get:CentralControlResponse.Response7.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response7::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlResponse.Response7.id)
}
inline std::string* Response7::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:CentralControlResponse.Response7.id)
  return _s;
}
inline const std::string& Response7::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Response7::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Response7::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Response7::release_id() {
  // @@protoc_insertion_point(field_release:CentralControlResponse.Response7.id)
  return _impl_.id_.Release();
}
inline void Response7::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlResponse.Response7.id)
}

// string type = 2;
inline void Response7::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Response7::type() const {
  // @@protoc_insertion_point(field_get:CentralControlResponse.Response7.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response7::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CentralControlResponse.Response7.type)
}
inline std::string* Response7::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:CentralControlResponse.Response7.type)
  return _s;
}
inline const std::string& Response7::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Response7::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Response7::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Response7::release_type() {
  // @@protoc_insertion_point(field_release:CentralControlResponse.Response7.type)
  return _impl_.type_.Release();
}
inline void Response7::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CentralControlResponse.Response7.type)
}

// int32 xPoint = 3;
inline void Response7::clear_xpoint() {
  _impl_.xpoint_ = 0;
}
inline int32_t Response7::_internal_xpoint() const {
  return _impl_.xpoint_;
}
inline int32_t Response7::xpoint() const {
  // @@protoc_insertion_point(field_get:CentralControlResponse.Response7.xPoint)
  return _internal_xpoint();
}
inline void Response7::_internal_set_xpoint(int32_t value) {
  
  _impl_.xpoint_ = value;
}
inline void Response7::set_xpoint(int32_t value) {
  _internal_set_xpoint(value);
  // @@protoc_insertion_point(field_set:CentralControlResponse.Response7.xPoint)
}

// int32 yPoint = 4;
inline void Response7::clear_ypoint() {
  _impl_.ypoint_ = 0;
}
inline int32_t Response7::_internal_ypoint() const {
  return _impl_.ypoint_;
}
inline int32_t Response7::ypoint() const {
  // @@protoc_insertion_point(field_get:CentralControlResponse.Response7.yPoint)
  return _internal_ypoint();
}
inline void Response7::_internal_set_ypoint(int32_t value) {
  
  _impl_.ypoint_ = value;
}
inline void Response7::set_ypoint(int32_t value) {
  _internal_set_ypoint(value);
  // @@protoc_insertion_point(field_set:CentralControlResponse.Response7.yPoint)
}

// int32 width = 5;
inline void Response7::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t Response7::_internal_width() const {
  return _impl_.width_;
}
inline int32_t Response7::width() const {
  // @@protoc_insertion_point(field_get:CentralControlResponse.Response7.width)
  return _internal_width();
}
inline void Response7::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void Response7::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CentralControlResponse.Response7.width)
}

// int32 height = 6;
inline void Response7::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t Response7::_internal_height() const {
  return _impl_.height_;
}
inline int32_t Response7::height() const {
  // @@protoc_insertion_point(field_get:CentralControlResponse.Response7.height)
  return _internal_height();
}
inline void Response7::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void Response7::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CentralControlResponse.Response7.height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CentralControlResponse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CentralControlResponse_2eproto
