// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: CentralControlRequest.proto

#include "CentralControlRequest.pb.h"
#include "CentralControlRequest.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace CentralControlRequest {

static const char* CentralControlRequest_method_names[] = {
  "/CentralControlRequest.CentralControlRequest/SendN640PicShow",
  "/CentralControlRequest.CentralControlRequest/SendN640ScreenShot",
  "/CentralControlRequest.CentralControlRequest/SendSignalSwitch",
  "/CentralControlRequest.CentralControlRequest/SendResolution",
  "/CentralControlRequest.CentralControlRequest/SendCheckSignal",
  "/CentralControlRequest.CentralControlRequest/SendHeartBeatData",
  "/CentralControlRequest.CentralControlRequest/SendScreenBrightOut",
  "/CentralControlRequest.CentralControlRequest/SendWIFICtrl",
  "/CentralControlRequest.CentralControlRequest/RespNoticeAppShutdown",
  "/CentralControlRequest.CentralControlRequest/SendPowerAmplifierVolumeCtrl",
  "/CentralControlRequest.CentralControlRequest/SendPowerAmplifierModeCtrl",
  "/CentralControlRequest.CentralControlRequest/RespTakePutPenReport",
  "/CentralControlRequest.CentralControlRequest/SendPowerAmplifierVolumeQuery",
  "/CentralControlRequest.CentralControlRequest/SendPowerAmplifierModeQuery",
  "/CentralControlRequest.CentralControlRequest/SendConfigSerialPort",
  "/CentralControlRequest.CentralControlRequest/SerialSend",
  "/CentralControlRequest.CentralControlRequest/RespSerialReceive",
  "/CentralControlRequest.CentralControlRequest/RespUPIO",
  "/CentralControlRequest.CentralControlRequest/CtrlRelay",
  "/CentralControlRequest.CentralControlRequest/StartInfraredLearn",
  "/CentralControlRequest.CentralControlRequest/SendInfraredData",
  "/CentralControlRequest.CentralControlRequest/RespInfraredData",
  "/CentralControlRequest.CentralControlRequest/RespLightIntensity",
  "/CentralControlRequest.CentralControlRequest/RespHumitureData",
  "/CentralControlRequest.CentralControlRequest/RespBodySensor",
  "/CentralControlRequest.CentralControlRequest/SendTouchHIDData",
  "/CentralControlRequest.CentralControlRequest/SendStatusQuery",
  "/CentralControlRequest.CentralControlRequest/SendSetCtCtrlStatus",
  "/CentralControlRequest.CentralControlRequest/SendSetSoundSrc",
  "/CentralControlRequest.CentralControlRequest/SendSetDevInVolume",
  "/CentralControlRequest.CentralControlRequest/SendOpenCentralControlComm",
  "/CentralControlRequest.CentralControlRequest/SendCloseCentralControlComm",
  "/CentralControlRequest.CentralControlRequest/SendResumeCentralControlComm",
  "/CentralControlRequest.CentralControlRequest/SendIsLinkingCentralControl",
};

std::unique_ptr< CentralControlRequest::Stub> CentralControlRequest::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CentralControlRequest::Stub> stub(new CentralControlRequest::Stub(channel, options));
  return stub;
}

CentralControlRequest::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendN640PicShow_(CentralControlRequest_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendN640ScreenShot_(CentralControlRequest_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendSignalSwitch_(CentralControlRequest_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendResolution_(CentralControlRequest_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendCheckSignal_(CentralControlRequest_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendHeartBeatData_(CentralControlRequest_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendScreenBrightOut_(CentralControlRequest_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendWIFICtrl_(CentralControlRequest_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RespNoticeAppShutdown_(CentralControlRequest_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendPowerAmplifierVolumeCtrl_(CentralControlRequest_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendPowerAmplifierModeCtrl_(CentralControlRequest_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RespTakePutPenReport_(CentralControlRequest_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendPowerAmplifierVolumeQuery_(CentralControlRequest_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendPowerAmplifierModeQuery_(CentralControlRequest_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendConfigSerialPort_(CentralControlRequest_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SerialSend_(CentralControlRequest_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RespSerialReceive_(CentralControlRequest_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RespUPIO_(CentralControlRequest_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CtrlRelay_(CentralControlRequest_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartInfraredLearn_(CentralControlRequest_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendInfraredData_(CentralControlRequest_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RespInfraredData_(CentralControlRequest_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RespLightIntensity_(CentralControlRequest_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RespHumitureData_(CentralControlRequest_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RespBodySensor_(CentralControlRequest_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendTouchHIDData_(CentralControlRequest_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendStatusQuery_(CentralControlRequest_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendSetCtCtrlStatus_(CentralControlRequest_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendSetSoundSrc_(CentralControlRequest_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendSetDevInVolume_(CentralControlRequest_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendOpenCentralControlComm_(CentralControlRequest_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendCloseCentralControlComm_(CentralControlRequest_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendResumeCentralControlComm_(CentralControlRequest_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendIsLinkingCentralControl_(CentralControlRequest_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CentralControlRequest::Stub::SendN640PicShow(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendN640PicShow_, context, request, response);
}

void CentralControlRequest::Stub::async::SendN640PicShow(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendN640PicShow_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendN640PicShow(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendN640PicShow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendN640PicShowRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendN640PicShow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendN640PicShowRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendN640PicShowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendN640ScreenShot(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendN640ScreenShot_, context, request, response);
}

void CentralControlRequest::Stub::async::SendN640ScreenShot(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendN640ScreenShot_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendN640ScreenShot(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendN640ScreenShot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendN640ScreenShotRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendN640ScreenShot_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendN640ScreenShotRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendN640ScreenShotRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendSignalSwitch(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendSignalSwitch_, context, request, response);
}

void CentralControlRequest::Stub::async::SendSignalSwitch(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSignalSwitch_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendSignalSwitch(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSignalSwitch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendSignalSwitchRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendSignalSwitch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendSignalSwitchRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendSignalSwitchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendResolution(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendResolution_, context, request, response);
}

void CentralControlRequest::Stub::async::SendResolution(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendResolution_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendResolution(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendResolution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendResolutionRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendResolution_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendResolutionRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendResolutionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendCheckSignal(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendCheckSignal_, context, request, response);
}

void CentralControlRequest::Stub::async::SendCheckSignal(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendCheckSignal_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendCheckSignal(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendCheckSignal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendCheckSignalRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendCheckSignal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendCheckSignalRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendCheckSignalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendHeartBeatData(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendHeartBeatData_, context, request, response);
}

void CentralControlRequest::Stub::async::SendHeartBeatData(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendHeartBeatData_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendHeartBeatData(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendHeartBeatData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendHeartBeatDataRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendHeartBeatData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendHeartBeatDataRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendHeartBeatDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendScreenBrightOut(::grpc::ClientContext* context, const ::CentralControlRequest::Request2& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request2, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendScreenBrightOut_, context, request, response);
}

void CentralControlRequest::Stub::async::SendScreenBrightOut(::grpc::ClientContext* context, const ::CentralControlRequest::Request2* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request2, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendScreenBrightOut_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendScreenBrightOut(::grpc::ClientContext* context, const ::CentralControlRequest::Request2* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendScreenBrightOut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendScreenBrightOutRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request2& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendScreenBrightOut_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendScreenBrightOutRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request2& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendScreenBrightOutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendWIFICtrl(::grpc::ClientContext* context, const ::CentralControlRequest::Request2& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request2, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendWIFICtrl_, context, request, response);
}

void CentralControlRequest::Stub::async::SendWIFICtrl(::grpc::ClientContext* context, const ::CentralControlRequest::Request2* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request2, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendWIFICtrl_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendWIFICtrl(::grpc::ClientContext* context, const ::CentralControlRequest::Request2* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendWIFICtrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendWIFICtrlRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request2& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendWIFICtrl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendWIFICtrlRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request2& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendWIFICtrlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::RespNoticeAppShutdown(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RespNoticeAppShutdown_, context, request, response);
}

void CentralControlRequest::Stub::async::RespNoticeAppShutdown(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespNoticeAppShutdown_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::RespNoticeAppShutdown(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespNoticeAppShutdown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncRespNoticeAppShutdownRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RespNoticeAppShutdown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncRespNoticeAppShutdownRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRespNoticeAppShutdownRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendPowerAmplifierVolumeCtrl(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendPowerAmplifierVolumeCtrl_, context, request, response);
}

void CentralControlRequest::Stub::async::SendPowerAmplifierVolumeCtrl(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendPowerAmplifierVolumeCtrl_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendPowerAmplifierVolumeCtrl(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendPowerAmplifierVolumeCtrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendPowerAmplifierVolumeCtrlRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendPowerAmplifierVolumeCtrl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendPowerAmplifierVolumeCtrlRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendPowerAmplifierVolumeCtrlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendPowerAmplifierModeCtrl(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendPowerAmplifierModeCtrl_, context, request, response);
}

void CentralControlRequest::Stub::async::SendPowerAmplifierModeCtrl(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendPowerAmplifierModeCtrl_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendPowerAmplifierModeCtrl(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendPowerAmplifierModeCtrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendPowerAmplifierModeCtrlRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendPowerAmplifierModeCtrl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendPowerAmplifierModeCtrlRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendPowerAmplifierModeCtrlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::RespTakePutPenReport(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RespTakePutPenReport_, context, request, response);
}

void CentralControlRequest::Stub::async::RespTakePutPenReport(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespTakePutPenReport_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::RespTakePutPenReport(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespTakePutPenReport_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncRespTakePutPenReportRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RespTakePutPenReport_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncRespTakePutPenReportRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRespTakePutPenReportRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendPowerAmplifierVolumeQuery(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendPowerAmplifierVolumeQuery_, context, request, response);
}

void CentralControlRequest::Stub::async::SendPowerAmplifierVolumeQuery(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendPowerAmplifierVolumeQuery_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendPowerAmplifierVolumeQuery(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendPowerAmplifierVolumeQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendPowerAmplifierVolumeQueryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendPowerAmplifierVolumeQuery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendPowerAmplifierVolumeQueryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendPowerAmplifierVolumeQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendPowerAmplifierModeQuery(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendPowerAmplifierModeQuery_, context, request, response);
}

void CentralControlRequest::Stub::async::SendPowerAmplifierModeQuery(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendPowerAmplifierModeQuery_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendPowerAmplifierModeQuery(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendPowerAmplifierModeQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendPowerAmplifierModeQueryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendPowerAmplifierModeQuery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendPowerAmplifierModeQueryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendPowerAmplifierModeQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendConfigSerialPort(::grpc::ClientContext* context, const ::CentralControlRequest::Request4& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request4, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendConfigSerialPort_, context, request, response);
}

void CentralControlRequest::Stub::async::SendConfigSerialPort(::grpc::ClientContext* context, const ::CentralControlRequest::Request4* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request4, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendConfigSerialPort_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendConfigSerialPort(::grpc::ClientContext* context, const ::CentralControlRequest::Request4* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendConfigSerialPort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendConfigSerialPortRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request4& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request4, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendConfigSerialPort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendConfigSerialPortRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request4& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendConfigSerialPortRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SerialSend(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SerialSend_, context, request, response);
}

void CentralControlRequest::Stub::async::SerialSend(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SerialSend_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SerialSend(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SerialSend_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSerialSendRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SerialSend_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSerialSendRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSerialSendRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::RespSerialReceive(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RespSerialReceive_, context, request, response);
}

void CentralControlRequest::Stub::async::RespSerialReceive(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespSerialReceive_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::RespSerialReceive(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespSerialReceive_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncRespSerialReceiveRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RespSerialReceive_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncRespSerialReceiveRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRespSerialReceiveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::RespUPIO(::grpc::ClientContext* context, const ::CentralControlRequest::Request5& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request5, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RespUPIO_, context, request, response);
}

void CentralControlRequest::Stub::async::RespUPIO(::grpc::ClientContext* context, const ::CentralControlRequest::Request5* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request5, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespUPIO_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::RespUPIO(::grpc::ClientContext* context, const ::CentralControlRequest::Request5* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespUPIO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncRespUPIORaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request5& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request5, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RespUPIO_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncRespUPIORaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request5& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRespUPIORaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::CtrlRelay(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CtrlRelay_, context, request, response);
}

void CentralControlRequest::Stub::async::CtrlRelay(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CtrlRelay_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::CtrlRelay(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CtrlRelay_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncCtrlRelayRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CtrlRelay_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncCtrlRelayRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCtrlRelayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::StartInfraredLearn(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartInfraredLearn_, context, request, response);
}

void CentralControlRequest::Stub::async::StartInfraredLearn(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartInfraredLearn_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::StartInfraredLearn(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartInfraredLearn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncStartInfraredLearnRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartInfraredLearn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncStartInfraredLearnRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartInfraredLearnRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendInfraredData(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendInfraredData_, context, request, response);
}

void CentralControlRequest::Stub::async::SendInfraredData(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendInfraredData_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendInfraredData(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendInfraredData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendInfraredDataRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendInfraredData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendInfraredDataRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendInfraredDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::RespInfraredData(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RespInfraredData_, context, request, response);
}

void CentralControlRequest::Stub::async::RespInfraredData(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespInfraredData_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::RespInfraredData(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespInfraredData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncRespInfraredDataRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RespInfraredData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncRespInfraredDataRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRespInfraredDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::RespLightIntensity(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RespLightIntensity_, context, request, response);
}

void CentralControlRequest::Stub::async::RespLightIntensity(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespLightIntensity_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::RespLightIntensity(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespLightIntensity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncRespLightIntensityRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RespLightIntensity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncRespLightIntensityRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRespLightIntensityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::RespHumitureData(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RespHumitureData_, context, request, response);
}

void CentralControlRequest::Stub::async::RespHumitureData(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespHumitureData_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::RespHumitureData(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespHumitureData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncRespHumitureDataRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RespHumitureData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncRespHumitureDataRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRespHumitureDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::RespBodySensor(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RespBodySensor_, context, request, response);
}

void CentralControlRequest::Stub::async::RespBodySensor(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespBodySensor_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::RespBodySensor(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespBodySensor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncRespBodySensorRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RespBodySensor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncRespBodySensorRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRespBodySensorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendTouchHIDData(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendTouchHIDData_, context, request, response);
}

void CentralControlRequest::Stub::async::SendTouchHIDData(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendTouchHIDData_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendTouchHIDData(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendTouchHIDData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendTouchHIDDataRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendTouchHIDData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendTouchHIDDataRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendTouchHIDDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendStatusQuery(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendStatusQuery_, context, request, response);
}

void CentralControlRequest::Stub::async::SendStatusQuery(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendStatusQuery_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendStatusQuery(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendStatusQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendStatusQueryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendStatusQuery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendStatusQueryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendStatusQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendSetCtCtrlStatus(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendSetCtCtrlStatus_, context, request, response);
}

void CentralControlRequest::Stub::async::SendSetCtCtrlStatus(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSetCtCtrlStatus_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendSetCtCtrlStatus(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSetCtCtrlStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendSetCtCtrlStatusRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendSetCtCtrlStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendSetCtCtrlStatusRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendSetCtCtrlStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendSetSoundSrc(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendSetSoundSrc_, context, request, response);
}

void CentralControlRequest::Stub::async::SendSetSoundSrc(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSetSoundSrc_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendSetSoundSrc(::grpc::ClientContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSetSoundSrc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendSetSoundSrcRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendSetSoundSrc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendSetSoundSrcRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request1& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendSetSoundSrcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendSetDevInVolume(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendSetDevInVolume_, context, request, response);
}

void CentralControlRequest::Stub::async::SendSetDevInVolume(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSetDevInVolume_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendSetDevInVolume(::grpc::ClientContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSetDevInVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendSetDevInVolumeRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CentralControlRequest::Request3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendSetDevInVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendSetDevInVolumeRaw(::grpc::ClientContext* context, const ::CentralControlRequest::Request3& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendSetDevInVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendOpenCentralControlComm(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendOpenCentralControlComm_, context, request, response);
}

void CentralControlRequest::Stub::async::SendOpenCentralControlComm(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendOpenCentralControlComm_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendOpenCentralControlComm(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendOpenCentralControlComm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendOpenCentralControlCommRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendOpenCentralControlComm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendOpenCentralControlCommRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendOpenCentralControlCommRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendCloseCentralControlComm(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendCloseCentralControlComm_, context, request, response);
}

void CentralControlRequest::Stub::async::SendCloseCentralControlComm(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendCloseCentralControlComm_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendCloseCentralControlComm(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendCloseCentralControlComm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendCloseCentralControlCommRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendCloseCentralControlComm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendCloseCentralControlCommRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendCloseCentralControlCommRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendResumeCentralControlComm(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendResumeCentralControlComm_, context, request, response);
}

void CentralControlRequest::Stub::async::SendResumeCentralControlComm(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendResumeCentralControlComm_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendResumeCentralControlComm(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendResumeCentralControlComm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendResumeCentralControlCommRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendResumeCentralControlComm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendResumeCentralControlCommRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendResumeCentralControlCommRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralControlRequest::Stub::SendIsLinkingCentralControl(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendIsLinkingCentralControl_, context, request, response);
}

void CentralControlRequest::Stub::async::SendIsLinkingCentralControl(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendIsLinkingCentralControl_, context, request, response, std::move(f));
}

void CentralControlRequest::Stub::async::SendIsLinkingCentralControl(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendIsLinkingCentralControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::PrepareAsyncSendIsLinkingCentralControlRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendIsLinkingCentralControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CentralControlRequest::Stub::AsyncSendIsLinkingCentralControlRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendIsLinkingCentralControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

CentralControlRequest::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request1* req,
             ::google::protobuf::Empty* resp) {
               return service->SendN640PicShow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request1* req,
             ::google::protobuf::Empty* resp) {
               return service->SendN640ScreenShot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request3* req,
             ::google::protobuf::Empty* resp) {
               return service->SendSignalSwitch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request1* req,
             ::google::protobuf::Empty* resp) {
               return service->SendResolution(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request1* req,
             ::google::protobuf::Empty* resp) {
               return service->SendCheckSignal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SendHeartBeatData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request2, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request2* req,
             ::google::protobuf::Empty* resp) {
               return service->SendScreenBrightOut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request2, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request2* req,
             ::google::protobuf::Empty* resp) {
               return service->SendWIFICtrl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request3* req,
             ::google::protobuf::Empty* resp) {
               return service->RespNoticeAppShutdown(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request1* req,
             ::google::protobuf::Empty* resp) {
               return service->SendPowerAmplifierVolumeCtrl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request1* req,
             ::google::protobuf::Empty* resp) {
               return service->SendPowerAmplifierModeCtrl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request3* req,
             ::google::protobuf::Empty* resp) {
               return service->RespTakePutPenReport(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SendPowerAmplifierVolumeQuery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SendPowerAmplifierModeQuery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request4, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request4* req,
             ::google::protobuf::Empty* resp) {
               return service->SendConfigSerialPort(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request3* req,
             ::google::protobuf::Empty* resp) {
               return service->SerialSend(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request3* req,
             ::google::protobuf::Empty* resp) {
               return service->RespSerialReceive(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request5, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request5* req,
             ::google::protobuf::Empty* resp) {
               return service->RespUPIO(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request3* req,
             ::google::protobuf::Empty* resp) {
               return service->CtrlRelay(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->StartInfraredLearn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request3* req,
             ::google::protobuf::Empty* resp) {
               return service->SendInfraredData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request3* req,
             ::google::protobuf::Empty* resp) {
               return service->RespInfraredData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request1* req,
             ::google::protobuf::Empty* resp) {
               return service->RespLightIntensity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request1* req,
             ::google::protobuf::Empty* resp) {
               return service->RespHumitureData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request1* req,
             ::google::protobuf::Empty* resp) {
               return service->RespBodySensor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request1* req,
             ::google::protobuf::Empty* resp) {
               return service->SendTouchHIDData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SendStatusQuery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request1* req,
             ::google::protobuf::Empty* resp) {
               return service->SendSetCtCtrlStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request1, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request1* req,
             ::google::protobuf::Empty* resp) {
               return service->SendSetSoundSrc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::CentralControlRequest::Request3, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CentralControlRequest::Request3* req,
             ::google::protobuf::Empty* resp) {
               return service->SendSetDevInVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SendOpenCentralControlComm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SendCloseCentralControlComm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SendResumeCentralControlComm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralControlRequest_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralControlRequest::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralControlRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SendIsLinkingCentralControl(ctx, req, resp);
             }, this)));
}

CentralControlRequest::Service::~Service() {
}

::grpc::Status CentralControlRequest::Service::SendN640PicShow(::grpc::ServerContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendN640ScreenShot(::grpc::ServerContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendSignalSwitch(::grpc::ServerContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendResolution(::grpc::ServerContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendCheckSignal(::grpc::ServerContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendHeartBeatData(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendScreenBrightOut(::grpc::ServerContext* context, const ::CentralControlRequest::Request2* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendWIFICtrl(::grpc::ServerContext* context, const ::CentralControlRequest::Request2* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::RespNoticeAppShutdown(::grpc::ServerContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendPowerAmplifierVolumeCtrl(::grpc::ServerContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendPowerAmplifierModeCtrl(::grpc::ServerContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::RespTakePutPenReport(::grpc::ServerContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendPowerAmplifierVolumeQuery(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendPowerAmplifierModeQuery(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendConfigSerialPort(::grpc::ServerContext* context, const ::CentralControlRequest::Request4* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SerialSend(::grpc::ServerContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::RespSerialReceive(::grpc::ServerContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::RespUPIO(::grpc::ServerContext* context, const ::CentralControlRequest::Request5* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::CtrlRelay(::grpc::ServerContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::StartInfraredLearn(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendInfraredData(::grpc::ServerContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::RespInfraredData(::grpc::ServerContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::RespLightIntensity(::grpc::ServerContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::RespHumitureData(::grpc::ServerContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::RespBodySensor(::grpc::ServerContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendTouchHIDData(::grpc::ServerContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendStatusQuery(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendSetCtCtrlStatus(::grpc::ServerContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendSetSoundSrc(::grpc::ServerContext* context, const ::CentralControlRequest::Request1* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendSetDevInVolume(::grpc::ServerContext* context, const ::CentralControlRequest::Request3* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendOpenCentralControlComm(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendCloseCentralControlComm(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendResumeCentralControlComm(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralControlRequest::Service::SendIsLinkingCentralControl(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace CentralControlRequest

